
# A separate file for mac builds, due to different installation runs, absence of tools (code coverage, mold, etc.)
# and inability to specify the _same_ job to run the same steps both for "ubuntu + some image" and "macos + no image" set ups.
#
# Keep its rustc versions the same as in the main testing pipeline file.
name: Build and Test (macOs)

on: push

defaults:
  run:
    shell: bash -ex {0}
env:
  RUST_BACKTRACE: 1
  # CARGO_INCREMENTAL: 0
  COPT: '-Werror'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-postgres:
    strategy:
        matrix:
          build_type: [debug, release]
    timeout-minutes: 30
    name: build postgres (macOs)
    runs-on: macos-latest

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Set pg revision for caching
        id: pg_ver
        run: echo ::set-output name=pg_rev::$(git rev-parse HEAD:vendor/postgres)
      - name: Cache postgres build
        id: cache_pg
        uses: actions/cache@v3
        with:
          path: |
            tmp_install/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-pg-${{ steps.pg_ver.outputs.pg_rev }}-${{ hashFiles('Makefile') }}

      - name: Install missing postgres system dependencies
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: brew install flex bison coreutils

      - name: Build postgres
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: make postgres -j$(nproc)

      # actions/cache@v3 does not allow concurrently using the same cache across job steps, so use a separate cache
      - name: Prepare postgres artifact
        run: tar -C tmp_install/ -cf ./postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz .
      - name: Upload postgres artifact
        uses: actions/upload-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz


  check-codestyle:
    needs: build-postgres
    strategy:
      matrix:
        rust_toolchain: [1.56]
        # XXX: Clippy does not really have a build type, but postgres does.
        # Clippy needs the headers we produce from postgres build, so the configuration type does not matter,
        # but we need to use some to get the cache with the headers.
        build_type: [debug]
    timeout-minutes: 30
    name: check codestyle (macOs)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          profile: minimal
          override: true
          components: rustfmt, clippy

      - name: Check Rust code formatting
        run: cargo fmt --all -- --check

      # cargo clippy checks FFI code that needs some pg specific headers
      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir ./tmp_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C ./tmp_install/
          rm -rf ./postgres-artifact/

      - name: Cache cargo clippy deps
        id: cache_cargo_clippy
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: v1-${{ runner.os }}-cargo-${{ matrix.rust_toolchain }}-clippy-${{ hashFiles('Cargo.lock') }}

      - name: Run clippy
        run: ./run_clippy.sh

      - name: Install poetry
        run: brew install poetry

      - name: Cache poetry deps
        id: cache_poetry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: v1-${{ runner.os }}-python-deps-${{ hashFiles('poetry.lock') }}

      - name: Install Python deps
        run: ./scripts/pysync

      - name: Check Python codestyle
        run: |
          poetry run yapf --recursive --diff ./test_runner/
          poetry run mypy ./test_runner/

  build-zenith:
    needs: [build-postgres]
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 30
    name: build zenith (macOs)
    runs-on: macos-latest

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          profile: minimal
          override: true

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir ./tmp_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C ./tmp_install/
          rm -rf ./postgres-artifact/

      - name: Cache cargo deps
        id: cache_cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-cargo-${{ matrix.rust_toolchain }}-${{ hashFiles('Cargo.lock') }}

      - name: Run cargo build
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi
          cargo build $CARGO_FLAGS --workspace --bins --examples --tests

      - name: Run cargo test
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi
          cargo test $CARGO_FLAGS

      - name: Prepare zenith binaries for upload
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi

          binaries=$(
            cargo metadata --format-version=1 --no-deps |
            jq -r '.packages[].targets[] | select(.kind | index("bin")) | .name'
          )

          test_exe_paths=$(
            cargo test $CARGO_FLAGS --message-format=json --no-run |
            jq -r '.executable | select(. != null)'
          )

          mkdir -p /tmp/zenith/bin/
          mkdir -p /tmp/zenith/test_bin/
          mkdir -p /tmp/zenith/etc/

          for bin in $binaries; do
            SRC=target/$BUILD_TYPE/$bin
            DST=/tmp/zenith/bin/$bin
            cp $SRC $DST
            echo $DST >> /tmp/zenith/etc/binaries.list
          done

          # Install test executables (for code coverage)
          if [[ $BUILD_TYPE == "debug" ]]; then
            for bin in $test_exe_paths; do
              SRC=$bin
              DST=/tmp/zenith/test_bin/$(basename $bin)
              cp $SRC $DST
              echo $DST >> /tmp/zenith/etc/binaries.list
            done
          fi

          tar -C /tmp/zenith/ -cf ./zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz ./bin/ ./test_bin/ ./etc/

      - name: Upload zenith binaries
        uses: actions/upload-artifact@v3
        with:
          name: zenith-artifact-cache
          retention-days: 1
          path: ./zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz

  python-regress-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 60
    name: run python regression test suite (macOs)
    runs-on: macos-latest

    env:
      PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        run: brew install poetry

      - name: Cache poetry deps
        id: cache_poetry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: v1-${{ runner.os }}-python-deps-${{ hashFiles('poetry.lock') }}

      - name: Install Python deps
        run: ./scripts/pysync

      - name: Get zenith artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: zenith-artifact-cache
          path: ./zenith-artifact/
      - name: Extract zenith artifact
        run: |
          mkdir -p /tmp/zenith/
          tar -xf ./zenith-artifact/zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz -C /tmp/zenith/
          rm -rf ./zenith-artifact/

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir -p /tmp/zenith/pg_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C /tmp/zenith/pg_install/
          rm -rf ./postgres-artifact/

      - name: Pytest regress tests
        env:
          ZENITH_BIN: /tmp/zenith/bin/
          POSTGRES_DISTRIB_DIR: /tmp/zenith/pg_install/
          TEST_OUTPUT: /tmp/test_output/
          # this variable will be embedded in perf test report
          # and is needed to distinguish different environments
          PLATFORM: zenith-local-ci
        run: |
          # Run the tests.
          #
          # The junit.xml file allows CircleCI to display more fine-grained test information
          # in its "Tests" tab in the results page.
          # --verbose prints name of each test (helpful when there are
          # multiple tests in one file)
          # -rA prints summary in the end
          # -n4 uses four processes to run tests via pytest-xdist
          # -s is not used to prevent pytest from capturing output, because tests are running
          # in parallel and logs are mixed between different tests
          ./scripts/pytest \
            --junitxml=$TEST_OUTPUT/junit.xml \
            --tb=short \
            --verbose \
            -m "not remote_cluster" \
            -rA test_runner/batch_pg_regress -n4

  python-other-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 60
    name: run python other tests suite (macOs)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        run: brew install poetry

      - name: Cache poetry deps
        id: cache_poetry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: v1-${{ runner.os }}-python-deps-${{ hashFiles('poetry.lock') }}

      - name: Install Python deps
        run: ./scripts/pysync

      - name: Get zenith artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: zenith-artifact-cache
          path: ./zenith-artifact/
      - name: Extract zenith artifact
        run: |
          mkdir -p /tmp/zenith/
          tar -xf ./zenith-artifact/zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz -C /tmp/zenith/
          rm -rf ./zenith-artifact/

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir -p /tmp/zenith/pg_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C /tmp/zenith/pg_install/
          rm -rf ./postgres-artifact/

      - name: Pytest other tests
        env:
          ZENITH_BIN: /tmp/zenith/bin/
          POSTGRES_DISTRIB_DIR: /tmp/zenith/pg_install/
          TEST_OUTPUT: /tmp/test_output/
          # this variable will be embedded in perf test report
          # and is needed to distinguish different environments
          PLATFORM: zenith-local-ci
        run: |
          ./scripts/pytest \
            --junitxml=$TEST_OUTPUT/junit.xml \
            --tb=short \
            --verbose \
            -m "not remote_cluster" \
            -rA test_runner/batch_others -n4

  python-performance-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [release]
        rust_toolchain: [1.56]
    timeout-minutes: 60
    name: run python performance tests suite (macOs)
    runs-on: macos-latest

    env:
      PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install poetry
        run: brew install poetry

      - name: Cache poetry deps
        id: cache_poetry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cache/pypoetry/virtualenvs
          key: v1-${{ runner.os }}-python-deps-${{ hashFiles('poetry.lock') }}

      - name: Install Python deps
        run: ./scripts/pysync

      - name: Get zenith artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: zenith-artifact-cache
          path: ./zenith-artifact/
      - name: Extract zenith artifact
        run: |
          mkdir -p /tmp/zenith/
          tar -xf ./zenith-artifact/zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz -C /tmp/zenith/
          rm -rf ./zenith-artifact/

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir -p /tmp/zenith/pg_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C /tmp/zenith/pg_install/
          rm -rf ./postgres-artifact/

      - name: Pytest performance tests
        env:
          ZENITH_BIN: /tmp/zenith/bin/
          POSTGRES_DISTRIB_DIR: /tmp/zenith/pg_install/
          TEST_OUTPUT: /tmp/test_output/
          # this variable will be embedded in perf test report
          # and is needed to distinguish different environments
          PLATFORM: zenith-local-ci
        run: |
          ./scripts/pytest \
            --junitxml=$TEST_OUTPUT/junit.xml \
            --tb=short \
            --verbose \
            -m "not remote_cluster" \
            -rA test_runner/performance
