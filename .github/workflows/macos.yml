
# A separate file for mac builds, due to different installation runs, absence of tools (code coverage, mold, etc.)
# and inability to specify the _same_ job to run the same steps both for "ubuntu + some image" and "macos + no image" set ups.
#
# Keep its rustc versions the same as in the main testing pipeline file.
name: Build and Test (macOs)

on: push

defaults:
  run:
    shell: bash -ex {0}
env:
  RUST_BACKTRACE: 1
  # CARGO_INCREMENTAL: 0
  COPT: '-Werror'
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-postgres:
    strategy:
        matrix:
          build_type: [debug, release]
    timeout-minutes: 30
    name: build postgres (macOs)
    runs-on: macos-latest

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Set pg revision for caching
        id: pg_ver
        run: echo ::set-output name=pg_rev::$(git rev-parse HEAD:vendor/postgres)
      - name: Cache postgres build
        id: cache_pg
        uses: actions/cache@v3
        with:
          path: tmp_install/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-pg-${{ steps.pg_ver.outputs.pg_rev }}-${{ hashFiles('Makefile') }}

      - name: Install missing postgres system dependencies
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: brew install flex bison coreutils

      - name: Build postgres
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: make postgres -j$(nproc)

      # actions/cache@v3 does not allow concurrently using the same cache across job steps, so use a separate cache
      - name: Prepare postgres artifact
        run: tar -C tmp_install/ -cf ./postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz .
      - name: Upload postgres artifact
        uses: actions/upload-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz


  build-zenith:
    needs: [build-postgres]
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 30
    name: build zenith (macOs)
    runs-on: macos-latest

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        uses: actions-rs/toolchain@v1
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          profile: minimal
          override: true

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir ./tmp_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C ./tmp_install/
          rm -rf ./postgres-artifact/

      - name: Cache cargo deps
        id: cache_cargo
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-cargo-${{ matrix.rust_toolchain }}-${{ hashFiles('Cargo.lock') }}

      - name: Run cargo build
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi
          cargo build $CARGO_FLAGS --workspace --bins --examples --tests

      - name: Run cargo test
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi
          cargo test $CARGO_FLAGS

      - name: Prepare zenith binaries for upload
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi

          binaries=$(
            cargo metadata --format-version=1 --no-deps |
            jq -r '.packages[].targets[] | select(.kind | index("bin")) | .name'
          )

          test_exe_paths=$(
            cargo test $CARGO_FLAGS --message-format=json --no-run |
            jq -r '.executable | select(. != null)'
          )

          mkdir -p /tmp/zenith/bin/
          mkdir -p /tmp/zenith/test_bin/
          mkdir -p /tmp/zenith/etc/

          for bin in $binaries; do
            SRC=target/$BUILD_TYPE/$bin
            DST=/tmp/zenith/bin/$bin
            cp $SRC $DST
            echo $DST >> /tmp/zenith/etc/binaries.list
          done

          # Install test executables (for code coverage)
          if [[ $BUILD_TYPE == "debug" ]]; then
            for bin in $test_exe_paths; do
              SRC=$bin
              DST=/tmp/zenith/test_bin/$(basename $bin)
              cp $SRC $DST
              echo $DST >> /tmp/zenith/etc/binaries.list
            done
          fi

          tar -C /tmp/zenith/ -cf ./zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz ./bin/ ./test_bin/ ./etc/

      - name: Upload zenith binaries
        uses: actions/upload-artifact@v3
        with:
          name: zenith-artifact-cache
          retention-days: 1
          path: ./zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz

  # TOOD kb disable python tests for non-main branches (artifact uploads also?)
  python-regress-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 60
    name: run python regression test suite (macOs)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Pytest regress tests
        env:
          PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"
        uses: ./.github/actions/run-python-test-set
        with:
          build_type: ${{ matrix.build_type }}
          rust_toolchain: ${{ matrix.rust_toolchain }}
          track_coverage: false
          test_selection: batch_pg_regress

  python-other-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 60
    name: run python other tests suite (macOs)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pytest other tests
        uses: ./.github/actions/run-python-test-set
        with:
          build_type: ${{ matrix.build_type }}
          rust_toolchain: ${{ matrix.rust_toolchain }}
          track_coverage: false
          test_selection: batch_others

  python-performance-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [release]
        rust_toolchain: [1.56]
    timeout-minutes: 60
    name: run python performance tests suite (macOs)
    runs-on: macos-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pytest performance tests
        env:
          PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"
        uses: ./.github/actions/run-python-test-set
        with:
          build_type: ${{ matrix.build_type }}
          rust_toolchain: ${{ matrix.rust_toolchain }}
          save_perf_report: true
          run_in_parallel: false
          test_selection: performance
