name: Build and Test (Linux)

on: push

defaults:
  run:
    shell: bash -ex {0}
env:
  RUST_BACKTRACE: 1
  COPT: '-Werror'
  AWS_ACCESS_KEY_ID: ${{ secrets.CACHEPOT_AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.CACHEPOT_AWS_SECRET_ACCESS_KEY }}
  CACHEPOT_BUCKET: zenith-rust-cachepot
  RUSTC_WRAPPER: cachepot
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-postgres:
    strategy:
        matrix:
          build_type: [debug, release]
          rust_toolchain: [1.56]
    timeout-minutes: 30
    name: build postgres (Linux)
    runs-on: ubuntu-latest

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Set pg revision for caching
        id: pg_ver
        run: echo ::set-output name=pg_rev::$(git rev-parse HEAD:vendor/postgres)
      - name: Cache postgres build
        id: cache_pg
        uses: actions/cache@v3
        with:
          path: tmp_install/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-pg-${{ steps.pg_ver.outputs.pg_rev }}-${{ hashFiles('Makefile') }}

      - name: Build postgres
        if: steps.cache_pg.outputs.cache-hit != 'true'
        run: make postgres -j$(nproc)

      # actions/cache@v3 does not allow concurrently using the same cache across job steps, so use a separate cache
      - name: Prepare postgres artifact
        run: tar -C tmp_install/ -cf ./postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz .
      - name: Upload postgres artifact
        uses: actions/upload-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz


  check-codestyle:
    needs: build-postgres
    strategy:
      matrix:
        rust_toolchain: [1.56]
        # XXX: Clippy does not really have a build type, but postgres does.
        # Clippy needs the headers we produce from postgres build, so the configuration type does not matter,
        # but we need to use some to get the cache with the headers.
        build_type: [debug]
    timeout-minutes: 30
    name: check codestyle (Linux)
    runs-on: ubuntu-latest

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}

    steps:
      # Cannot override workdir properly for the whole container
      # https://github.com/actions/runner/issues/878
      # So use GitHub's one with fixed access for the user
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 2
          submodules: true

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        run: rustup default ${{ matrix.rust_toolchain }}

      - name: Check Rust code formatting
        run: cargo fmt --all -- --check

      # cargo clippy checks FFI code that needs some pg specific headers
      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir ./tmp_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C ./tmp_install/
          rm -rf ./postgres-artifact/

      - name: Cache cargo clippy deps
        id: cache_cargo_clippy
        uses: actions/cache@v3
        if: env.cargo_incremental != '0'
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: v1-${{ runner.os }}-cargo-${{ matrix.rust_toolchain }}-clippy-${{ hashFiles('Cargo.lock') }}

      - name: Run clippy
        run: ./run_clippy.sh

      - name: Cache poetry deps
        id: cache_poetry
        uses: actions/cache@v3
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: v1-${{ runner.os }}-python-deps-${{ hashFiles('poetry.lock') }}

      - name: Install Python deps
        run: ./scripts/pysync

      - name: Check Python codestyle
        run: |
          poetry run yapf --recursive --diff ./test_runner/
          poetry run mypy ./test_runner/

  build-zenith:
    needs: build-postgres
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 30
    name: build zenith (Linux)
    runs-on: ubuntu-latest

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}

    env:
      BUILD_TYPE: ${{ matrix.build_type }}

    steps:
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Install rust toolchain ${{ matrix.rust_toolchain }}
        run: rustup default ${{ matrix.rust_toolchain }}

      - name: Get postgres artifact for restoration
        uses: actions/download-artifact@v3
        with:
          name: postgres-artifact-cache
          path: ./postgres-artifact/
      - name: Extract postgres artifact
        run: |
          mkdir ./tmp_install/
          tar -xf ./postgres-artifact/postgres-${{ runner.os }}-${{ matrix.build_type }}-artifact.tgz -C ./tmp_install/
          rm -rf ./postgres-artifact/

      - name: Cache cargo deps
        id: cache_cargo
        uses: actions/cache@v3
        if: env.cargo_incremental != '0'
        with:
          path: |
            ~/.cargo/registry/
            ~/.cargo/git/
            target/
          key: v1-${{ runner.os }}-${{ matrix.build_type }}-cargo-${{ matrix.rust_toolchain }}-${{ hashFiles('Cargo.lock') }}

      - name: Run cargo build
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            cov_prefix=(scripts/coverage "--profraw-prefix=$GITHUB_JOB" --dir=/tmp/zenith/coverage run)
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            cov_prefix=()
            CARGO_FLAGS=--release
          fi
          "${cov_prefix[@]}" mold -run cargo build $CARGO_FLAGS --workspace --bins --examples --tests
          cachepot -s

      - name: Run cargo test
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            cov_prefix=(scripts/coverage "--profraw-prefix=$GITHUB_JOB" --dir=/tmp/zenith/coverage run)
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            cov_prefix=()
            CARGO_FLAGS=--release
          fi
          "${cov_prefix[@]}" mold -run cargo test $CARGO_FLAGS

      - name: Prepare zenith binaries for upload
        run: |
          if [[ $BUILD_TYPE == "debug" ]]; then
            CARGO_FLAGS=
          elif [[ $BUILD_TYPE == "release" ]]; then
            CARGO_FLAGS=--release
          fi

          binaries=$(
            mold -run cargo metadata --format-version=1 --no-deps |
            jq -r '.packages[].targets[] | select(.kind | index("bin")) | .name'
          )

          test_exe_paths=$(
            mold -run cargo test $CARGO_FLAGS --message-format=json --no-run |
            jq -r '.executable | select(. != null)'
          )

          mkdir -p /tmp/zenith/bin/
          mkdir -p /tmp/zenith/test_bin/
          mkdir -p /tmp/zenith/etc/

          for bin in $binaries; do
            SRC=target/$BUILD_TYPE/$bin
            DST=/tmp/zenith/bin/$bin
            cp $SRC $DST
            echo $DST >> /tmp/zenith/etc/binaries.list
          done

          # Install test executables (for code coverage)
          if [[ $BUILD_TYPE == "debug" ]]; then
            for bin in $test_exe_paths; do
              SRC=$bin
              DST=/tmp/zenith/test_bin/$(basename $bin)
              cp $SRC $DST
              echo $DST >> /tmp/zenith/etc/binaries.list
            done
          fi

          tar -C /tmp/zenith/ -cf ./zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz ./bin/ ./test_bin/ ./etc/

      - name: Upload zenith binaries
        uses: actions/upload-artifact@v3
        with:
          name: zenith-artifact-cache
          retention-days: 1
          path: ./zenith-${{ runner.os }}-${{ matrix.build_type }}-${{ matrix.rust_toolchain }}-artifact.tgz

      # TODO kb this now breaks: enable + upload (probably missing env vars from the original Dockerfile?)
      # - name: Merge coverage data
      #   run: |
      #     # This will speed up workspace uploads
      #     if [[ $BUILD_TYPE == "debug" ]]; then
      #       scripts/coverage "--profraw-prefix=$GITHUB_JOB" --dir=/tmp/zenith/coverage merge
      #     fi

  python-regress-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 30
    name: run python regression test suite (Linux)
    runs-on: ubuntu-latest

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}

    steps:
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/
      - name: Checkout
        uses: actions/checkout@v3
        with:
          submodules: true
          fetch-depth: 2

      - name: Pytest regress tests
        env:
          PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"
        uses: ./.github/actions/run-python-test-set
        with:
          build_type: ${{ matrix.build_type }}
          rust_toolchain: ${{ matrix.rust_toolchain }}
          test_selection: batch_pg_regress

  python-other-tests:
    needs: build-zenith
    strategy:
      matrix:
        build_type: [debug, release]
        rust_toolchain: [1.56]
    timeout-minutes: 30
    name: run python other tests suite (Linux)
    runs-on: ubuntu-latest

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}

    steps:
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pytest other tests
        uses: ./.github/actions/run-python-test-set
        with:
          build_type: ${{ matrix.build_type }}
          rust_toolchain: ${{ matrix.rust_toolchain }}
          test_selection: batch_others

  host-cleanup:
    needs: build-zenith
    name: prepare for perfromance test by cleaning up the host
    runs-on: ubuntu-latest

    steps:
      - name: Cleanup the host
        run: |
          echo '----before cleanup'
          sudo df -h

          sudo apt clean
          docker rmi $(docker image ls -aq)
          sudo rm -rf /usr/share/dotnet
          sudo rm -rf /usr/local/lib/android
          sudo rm -rf /opt/ghc
          sudo rm -rf /usr/local/share/boost
          sudo rm -rf "$AGENT_TOOLSDIRECTORY"

          echo '----after cleanup'
          sudo df -h


  python-performance-tests:
    needs: host-cleanup
    strategy:
      matrix:
        build_type: [release]
        rust_toolchain: [1.56]
    timeout-minutes: 30
    name: run python performance tests suite (Linux)
    runs-on: ubuntu-latest

    container:
      image: zimg/rust:${{ matrix.rust_toolchain }}
      volumes:
        - /tmp/:/tmp/

    steps:
      - name: Fix permissions
        run: sudo chmod -R a+rwx /__w/
      - name: Checkout
        uses: actions/checkout@v3

      - name: Pytest performance tests
        env:
          PERF_TEST_RESULT_CONNSTR: "${{ secrets.PERF_TEST_RESULT_CONNSTR }}"
        uses: ./.github/actions/run-python-test-set
        with:
          build_type: ${{ matrix.build_type }}
          rust_toolchain: ${{ matrix.rust_toolchain }}
          save_perf_report: true
          run_in_parallel: false
          track_coverage: false
          test_selection: performance

  e2e-tests:
      needs: check-codestyle
      name: trigger e2e cluster tests
      runs-on: ubuntu-latest

      steps:
        - uses: actions/github-script@v6
          with:
            github-token: ${{ secrets.CI_ACCESS_TOKEN }}
            script: |
              const owner = '${{ github.repository_owner }}';
              const commit_hash = '${{ github.sha }}';
              const remote_repo = 'console';

              await github.rest.repos.createCommitStatus({
                owner,
                repo: '${{ github.event.repository.name }}',
                sha: commit_hash,
                state: 'pending',
                context: 'zenith-remote-ci',
                description: `[${owner}/${remote_repo}] Remote CI job was queried`,
              });

              await github.rest.actions.createWorkflowDispatch({
                owner,
                repo: remote_repo,
                workflow_id: 'testing.yml',
                ref: 'main',
                inputs: {
                  ci_job_name: 'zenith-remote-ci',
                  remote_repo: '${{ github.repository }}',
                  commit_hash,
                },
              })

